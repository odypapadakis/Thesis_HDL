
#
# Mnemonic Maps
#
mmap new -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list DATA GROUP]}]} {
set createdGroup([list DATA GROUP]) 1
catch {group new -name {DATA GROUP} -overlay 0}
}
if {[catch {group get -using [list INSTRUCTION GROUP]}]} {
set createdGroup([list INSTRUCTION GROUP]) 1
catch {group new -name {INSTRUCTION GROUP} -overlay 0}
}
if {[info exists createdGroup([list DATA GROUP])]} {
group using {DATA GROUP}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    {# DATA SIGNALS} \
    {### cdivider} \
    {# ARBITER COMMUNTICATION} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.D_Bus_RQ}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.D_Bus_GRANT}]} ] \
    {### cdivider} \
    {# BUS COMMUNICATION} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_DataMem_In[31:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_DataMem_Ready}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_DataMem_Out[31:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_DataMem_Read}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_DataMem_Write[3:0]}]} ] \
    {### cdivider} \
    {# PROCESSOR COMMUNICATION} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_DataMem_Address[29:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_DataMem_In[31:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_DataMem_Out[31:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_DataMem_Read}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_DataMem_Ready}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_DataMem_Write[3:0]}]} ] \
    {### cdivider}
}

if {[info exists createdGroup([list INSTRUCTION GROUP])]} {
group using {INSTRUCTION GROUP}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    {# INSTRUCTION SIGNALS} \
    {### cdivider} \
    {# ARBITER COMMUNTICATION} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.I_Bus_GRANT}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.I_Bus_RQ}]} ] \
    {### cdivider} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_In[31:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_In[31:0]}]} ] \
    {### cdivider} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_Ready}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_Ready}]} ] \
    {### cdivider} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_Address[29:0]}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_Address[29:0]}]} ] \
    {### cdivider} \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_Read}]} ] \
    [subst  {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_Read}]} ] \
    {### cdivider}
}


set groupId0 [waveform add -groups {{DATA GROUP}}]
waveform hierarchy collapse $groupId0

set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{INSTRUCTION GROUP}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {INSTRUCTION SIGNALS} {}
    cdivider {}
    {ARBITER COMMUNTICATION} {}
    {[format {ArbitrationSubModule_Testbench.uut.I_Bus_GRANT}]} {}
    {[format {ArbitrationSubModule_Testbench.uut.I_Bus_RQ}]} {}
    cdivider {}
    {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_In[31:0]}]} {-radix %x}
    {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_In[31:0]}]} {}
    cdivider {}
    {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_Ready}]} {}
    {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_Ready}]} {}
    cdivider {}
    {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_Address[29:0]}]} {}
    {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_Address[29:0]}]} {}
    cdivider {}
    {[format {ArbitrationSubModule_Testbench.uut.P_InstMem_Read}]} {}
    {[format {ArbitrationSubModule_Testbench.uut.Bus_InstMem_Read}]} {}
    cdivider {}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format path $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


waveform xview limits 0 1000000ps
