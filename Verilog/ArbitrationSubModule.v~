`timescale 1ns / 1ps

/*
* File			: ArbitrationModule.v
* Project 		: Design of a multicore system based on the mips32 processor.  
* Creator(s)	: Odysseas Papadakis	Univeristy of Patras, Computer engineering & informatics dept.
*
* Description: 
*				
*				Each processor has a module like this one, standing between the processor and the Bus.
*				It can give access to either the Instruction or the Data bus independently.
*
*				The logic is the following : 
*
*				When no R/W signals are HIGH from the processor, the outputs of the module touching the Bus are set to HIGH-Z.
*				Additionally the outputs connected to the processor are all LOW. Indicating that there is no data for the 
*				processor to Grab. 
*				(we can call this the idle state)
*
*				When any R/W signal goes HIGH from the processor, the Arbitration module sends a Bus Request (Bus_RQ)
*				to the Bus Arbiter , for the corresponding Bus.
*				(we can call this the request_sent state)
*
*				Once the Bus Arbiter sets Bus_Grant to HIGH,  the BUS is ours. 
*				The outputs of the processor are allowed to drive the Bus. Additionally the inputs of the processor
*				are allowed to be driven by the bus.
*				(we can call this the bus_connected state )
*
*				
*				Once the Bus Arbiter sets Bus_Grant to LOW,  the processor is disconnected from the bus.
*				We return to the idle state
*
*
*
*
*
*/

module ArbitrationSubModule(

	// Data Memory Interface  , these signals will be connected the DATA BUS and the data outputs of the processor

		//	Bus --> Arbitration Module
		input	[31:0]	Bus_DataMem_In,	
		input			Bus_DataMem_Ready,		

		// Processor --> Arbitration Module
		input 			P_DataMem_Read,
		input	[3:0]   P_DataMem_Write,
		input	[29:0]	P_DataMem_Address,
		input	[31:0]	P_DataMem_Out,

		// Arbitration Module --> Processor
		output	[31:0]	P_DataMem_In,
		output			P_DataMem_Ready,

		//	Arbitration Module --> Bus
		output			Bus_DataMem_Read,		
		output	[3:0] 	Bus_DataMem_Write,		
		output	[29:0]	Bus_DataMem_Address,	
		output	[31:0]	Bus_DataMem_Out,		

	// Instruction Memory Interface    , these signals will connected to  the INSTRUCTION BUS and the instruction outputs of the processor
		
		//	Bus --> Arbitration Module           
		input			Bus_InstMem_Ready,   
		input	[31:0]	Bus_InstMem_In,		

		// Processor --> Arbitration Module
		input	[29:0]	P_InstMem_Address,
		input			P_InstMem_Read,

		// Arbitration Module --> Processor
		output			P_InstMem_Ready,
		output	[31:0]	P_InstMem_In,

		//	Arbitration Module --> Bus
		output	[29:0]	Bus_InstMem_Address,
		output			Bus_InstMem_Read,

	// Signals to\from the Arbiter	
		
		// Data Signaling
			// Arbitration Module --> Bus Arbiter
			output	D_Bus_RQ,		 	// Request to use the Data bus
			// Bus Arbiter --> Arbitration Module
			input	D_Bus_GRANT,        // The Data bus is ours to use

		// Instruction Signaling
			// Arbitration Module --> Bus Arbiter
			output	I_Bus_RQ,			 // Request to use the Instruction bus
			//Bus Arbiter --> Arbitration Module
			input	I_Bus_GRANT       // The instruction bus is ours to use
		
	);     
	      
	// Instruction Memory Interface   ---------------------------------------------------------------

		//Arbitration Module --> Bus Arbiter
			// When the processor wants to read instruction data, set the Instruction Bus Request to HIGH
	  	assign I_Bus_RQ = P_InstMem_Read ;  
		
		//Arbitration Module --> Instruction Bus
	  	assign Bus_InstMem_Read		= 	(I_Bus_GRANT) ? P_InstMem_Read			: 1'bz;
	  	assign Bus_InstMem_Address 	= 	(I_Bus_GRANT) ? P_InstMem_Address		: 30'bz;

	  	//Arbitration Module --> Processor
	  	assign P_InstMem_Ready		= 	(I_Bus_GRANT) ? Bus_InstMem_Ready 		: 1'b0;
	  	assign P_InstMem_In 		=	Bus_InstMem_In;





	 // Data memory Interface  --------------------------------------------------------------------

	 	//Arbitration Module --> Bus Arbiter
	 		// When the processor wants to read or write, generate a bus request
	 	assign D_Bus_RQ = ( P_DataMem_Read | P_DataMem_Write[3] | P_DataMem_Write[2] | P_DataMem_Write[1] | P_DataMem_Write[0]);

	 	//Arbitration Module --> Data Bus
	 		// If we have been given control of the bus, forward the data from the processor, on the bus
	 		// 	else set the outputs to HIGH-Z to avoid bus contamination.
		assign Bus_DataMem_Read			= 	(D_Bus_GRANT) ? P_DataMem_Read 		: 1'bz;
		assign Bus_DataMem_Write		= 	(D_Bus_GRANT) ? P_DataMem_Write		: 4'bz;
		assign Bus_DataMem_Address		= 	(D_Bus_GRANT) ? P_DataMem_Address 	: 30'bz;
		assign Bus_DataMem_Out			= 	(D_Bus_GRANT) ? P_DataMem_Out 		: 32'bz;

	 	//Arbitration Module --> Processor
	 		
		assign P_DataMem_Ready 			=	(D_Bus_GRANT) ? Bus_DataMem_Ready	: 1'b0;
		assign P_DataMem_In 			= 	(D_Bus_GRANT) ? Bus_DataMem_In		: 32'b0;

endmodule
